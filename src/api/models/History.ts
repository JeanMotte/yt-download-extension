/* tslint:disable */
/* eslint-disable */
/**
 * YT Download Service
 * Allows a google authenticated user to download videos from YouTube.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jijimotte@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The history of downloaded videos.
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {Date}
     * @memberof History
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof History
     */
    updatedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    ytVideoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    videoTitle: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    resolution: string | null;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    formatId: string;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    startTime: number | null;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    endTime: number | null;
}

/**
 * Check if a given object implements the History interface.
 */
export function instanceOfHistory(value: object): value is History {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('ytVideoUrl' in value) || value['ytVideoUrl'] === undefined) return false;
    if (!('videoTitle' in value) || value['videoTitle'] === undefined) return false;
    if (!('resolution' in value) || value['resolution'] === undefined) return false;
    if (!('formatId' in value) || value['formatId'] === undefined) return false;
    if (!('startTime' in value) || value['startTime'] === undefined) return false;
    if (!('endTime' in value) || value['endTime'] === undefined) return false;
    return true;
}

export function HistoryFromJSON(json: any): History {
    return HistoryFromJSONTyped(json, false);
}

export function HistoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): History {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (json['created_at'] == null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] == null ? null : new Date(json['updated_at'])),
        'id': json['id'],
        'userId': json['user_id'],
        'ytVideoUrl': json['yt_video_url'],
        'videoTitle': json['video_title'],
        'resolution': json['resolution'],
        'formatId': json['format_id'],
        'startTime': json['start_time'],
        'endTime': json['end_time'],
    };
}

export function HistoryToJSON(json: any): History {
    return HistoryToJSONTyped(json, false);
}

export function HistoryToJSONTyped(value?: History | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': ((value['createdAt'] as any).toISOString()),
        'updated_at': ((value['updatedAt'] as any).toISOString()),
        'id': value['id'],
        'user_id': value['userId'],
        'yt_video_url': value['ytVideoUrl'],
        'video_title': value['videoTitle'],
        'resolution': value['resolution'],
        'format_id': value['formatId'],
        'start_time': value['startTime'],
        'end_time': value['endTime'],
    };
}

