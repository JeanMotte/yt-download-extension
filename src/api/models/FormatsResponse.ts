/* tslint:disable */
/* eslint-disable */
/**
 * YT Download Service
 * Allows a google authenticated user to download videos from YouTube.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jijimotte@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AudioOption } from './AudioOption';
import {
    AudioOptionFromJSON,
    AudioOptionFromJSONTyped,
    AudioOptionToJSON,
    AudioOptionToJSONTyped,
} from './AudioOption';
import type { ResolutionOption } from './ResolutionOption';
import {
    ResolutionOptionFromJSON,
    ResolutionOptionFromJSONTyped,
    ResolutionOptionToJSON,
    ResolutionOptionToJSONTyped,
} from './ResolutionOption';

/**
 * Response model for available video formats.
 * @export
 * @interface FormatsResponse
 */
export interface FormatsResponse {
    /**
     * 
     * @type {string}
     * @memberof FormatsResponse
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof FormatsResponse
     */
    thumbnailUrl?: string | null;
    /**
     * 
     * @type {Array<ResolutionOption>}
     * @memberof FormatsResponse
     */
    resolutions: Array<ResolutionOption>;
    /**
     * 
     * @type {Array<AudioOption>}
     * @memberof FormatsResponse
     */
    audioOnly: Array<AudioOption>;
}

/**
 * Check if a given object implements the FormatsResponse interface.
 */
export function instanceOfFormatsResponse(value: object): value is FormatsResponse {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('resolutions' in value) || value['resolutions'] === undefined) return false;
    if (!('audioOnly' in value) || value['audioOnly'] === undefined) return false;
    return true;
}

export function FormatsResponseFromJSON(json: any): FormatsResponse {
    return FormatsResponseFromJSONTyped(json, false);
}

export function FormatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'thumbnailUrl': json['thumbnail_url'] == null ? undefined : json['thumbnail_url'],
        'resolutions': ((json['resolutions'] as Array<any>).map(ResolutionOptionFromJSON)),
        'audioOnly': ((json['audio_only'] as Array<any>).map(AudioOptionFromJSON)),
    };
}

export function FormatsResponseToJSON(json: any): FormatsResponse {
    return FormatsResponseToJSONTyped(json, false);
}

export function FormatsResponseToJSONTyped(value?: FormatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'thumbnail_url': value['thumbnailUrl'],
        'resolutions': ((value['resolutions'] as Array<any>).map(ResolutionOptionToJSON)),
        'audio_only': ((value['audioOnly'] as Array<any>).map(AudioOptionToJSON)),
    };
}

