/* tslint:disable */
/* eslint-disable */
/**
 * YT Download Service
 * Allows a google authenticated user to download videos from YouTube.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jijimotte@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DownloadRequest,
  DownloadSampleRequest,
  FormatsResponse,
  HTTPValidationError,
  VideoURL,
} from '../models/index';
import {
    DownloadRequestFromJSON,
    DownloadRequestToJSON,
    DownloadSampleRequestFromJSON,
    DownloadSampleRequestToJSON,
    FormatsResponseFromJSON,
    FormatsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    VideoURLFromJSON,
    VideoURLToJSON,
} from '../models/index';

export interface DownloadFullVideoApiVideoDownloadPostRequest {
    downloadRequest: DownloadRequest;
}

export interface DownloadOptimalVideoSampleApiVideoDownloadSamplePostRequest {
    downloadSampleRequest: DownloadSampleRequest;
}

export interface GetFormatsApiVideoFormatsPostRequest {
    videoURL: VideoURL;
}

/**
 * VideoApi - interface
 * 
 * @export
 * @interface VideoApiInterface
 */
export interface VideoApiInterface {
    /**
     * Download a video and returns it as a file attachment.
     * @summary Download Full Video
     * @param {DownloadRequest} downloadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApiInterface
     */
    downloadFullVideoApiVideoDownloadPostRaw(requestParameters: DownloadFullVideoApiVideoDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Download a video and returns it as a file attachment.
     * Download Full Video
     */
    downloadFullVideoApiVideoDownloadPost(downloadRequest: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Download a specific time-range.
     * @summary Download Optimal Video Sample
     * @param {DownloadSampleRequest} downloadSampleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApiInterface
     */
    downloadOptimalVideoSampleApiVideoDownloadSamplePostRaw(requestParameters: DownloadOptimalVideoSampleApiVideoDownloadSamplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Download a specific time-range.
     * Download Optimal Video Sample
     */
    downloadOptimalVideoSampleApiVideoDownloadSamplePost(downloadSampleRequest: DownloadSampleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Endpoint to get processed and user-friendly video formats.
     * @summary Get Formats
     * @param {VideoURL} videoURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApiInterface
     */
    getFormatsApiVideoFormatsPostRaw(requestParameters: GetFormatsApiVideoFormatsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormatsResponse>>;

    /**
     * Endpoint to get processed and user-friendly video formats.
     * Get Formats
     */
    getFormatsApiVideoFormatsPost(videoURL: VideoURL, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormatsResponse>;

}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI implements VideoApiInterface {

    /**
     * Download a video and returns it as a file attachment.
     * Download Full Video
     */
    async downloadFullVideoApiVideoDownloadPostRaw(requestParameters: DownloadFullVideoApiVideoDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['downloadRequest'] == null) {
            throw new runtime.RequiredError(
                'downloadRequest',
                'Required parameter "downloadRequest" was null or undefined when calling downloadFullVideoApiVideoDownloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/video/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DownloadRequestToJSON(requestParameters['downloadRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download a video and returns it as a file attachment.
     * Download Full Video
     */
    async downloadFullVideoApiVideoDownloadPost(downloadRequest: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadFullVideoApiVideoDownloadPostRaw({ downloadRequest: downloadRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Download a specific time-range.
     * Download Optimal Video Sample
     */
    async downloadOptimalVideoSampleApiVideoDownloadSamplePostRaw(requestParameters: DownloadOptimalVideoSampleApiVideoDownloadSamplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['downloadSampleRequest'] == null) {
            throw new runtime.RequiredError(
                'downloadSampleRequest',
                'Required parameter "downloadSampleRequest" was null or undefined when calling downloadOptimalVideoSampleApiVideoDownloadSamplePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/video/download/sample`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DownloadSampleRequestToJSON(requestParameters['downloadSampleRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download a specific time-range.
     * Download Optimal Video Sample
     */
    async downloadOptimalVideoSampleApiVideoDownloadSamplePost(downloadSampleRequest: DownloadSampleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadOptimalVideoSampleApiVideoDownloadSamplePostRaw({ downloadSampleRequest: downloadSampleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint to get processed and user-friendly video formats.
     * Get Formats
     */
    async getFormatsApiVideoFormatsPostRaw(requestParameters: GetFormatsApiVideoFormatsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormatsResponse>> {
        if (requestParameters['videoURL'] == null) {
            throw new runtime.RequiredError(
                'videoURL',
                'Required parameter "videoURL" was null or undefined when calling getFormatsApiVideoFormatsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/video/formats`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoURLToJSON(requestParameters['videoURL']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormatsResponseFromJSON(jsonValue));
    }

    /**
     * Endpoint to get processed and user-friendly video formats.
     * Get Formats
     */
    async getFormatsApiVideoFormatsPost(videoURL: VideoURL, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormatsResponse> {
        const response = await this.getFormatsApiVideoFormatsPostRaw({ videoURL: videoURL }, initOverrides);
        return await response.value();
    }

}
