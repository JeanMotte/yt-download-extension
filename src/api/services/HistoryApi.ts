/* tslint:disable */
/* eslint-disable */
/**
 * YT Download Service
 * Allows a google authenticated user to download videos from YouTube.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jijimotte@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  History,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HistoryFromJSON,
    HistoryToJSON,
} from '../models/index';

export interface DeleteUserHistoryEntryApiHistoryHistoryIdDeleteRequest {
    historyId: string;
}

/**
 * HistoryApi - interface
 * 
 * @export
 * @interface HistoryApiInterface
 */
export interface HistoryApiInterface {
    /**
     * Clears the download history for the currently authenticated user.
     * @summary Clear User Download History
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    clearUserHistoryApiHistoryDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Clears the download history for the currently authenticated user.
     * Clear User Download History
     */
    clearUserHistoryApiHistoryDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Deletes a specific download history entry for the currently authenticated user.
     * @summary Delete Specific Download History Entry
     * @param {string} historyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    deleteUserHistoryEntryApiHistoryHistoryIdDeleteRaw(requestParameters: DeleteUserHistoryEntryApiHistoryHistoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a specific download history entry for the currently authenticated user.
     * Delete Specific Download History Entry
     */
    deleteUserHistoryEntryApiHistoryHistoryIdDelete(historyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves the download history for the currently authenticated user.
     * @summary Get User Download History
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    getUserHistoryApiHistoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<History>>>;

    /**
     * Retrieves the download history for the currently authenticated user.
     * Get User Download History
     */
    getUserHistoryApiHistoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<History>>;

}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI implements HistoryApiInterface {

    /**
     * Clears the download history for the currently authenticated user.
     * Clear User Download History
     */
    async clearUserHistoryApiHistoryDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/api/history/`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Clears the download history for the currently authenticated user.
     * Clear User Download History
     */
    async clearUserHistoryApiHistoryDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.clearUserHistoryApiHistoryDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific download history entry for the currently authenticated user.
     * Delete Specific Download History Entry
     */
    async deleteUserHistoryEntryApiHistoryHistoryIdDeleteRaw(requestParameters: DeleteUserHistoryEntryApiHistoryHistoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['historyId'] == null) {
            throw new runtime.RequiredError(
                'historyId',
                'Required parameter "historyId" was null or undefined when calling deleteUserHistoryEntryApiHistoryHistoryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/api/history/{history_id}`;
        urlPath = urlPath.replace(`{${"history_id"}}`, encodeURIComponent(String(requestParameters['historyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific download history entry for the currently authenticated user.
     * Delete Specific Download History Entry
     */
    async deleteUserHistoryEntryApiHistoryHistoryIdDelete(historyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserHistoryEntryApiHistoryHistoryIdDeleteRaw({ historyId: historyId }, initOverrides);
    }

    /**
     * Retrieves the download history for the currently authenticated user.
     * Get User Download History
     */
    async getUserHistoryApiHistoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<History>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/api/history/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryFromJSON));
    }

    /**
     * Retrieves the download history for the currently authenticated user.
     * Get User Download History
     */
    async getUserHistoryApiHistoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<History>> {
        const response = await this.getUserHistoryApiHistoryGetRaw(initOverrides);
        return await response.value();
    }

}
