/* tslint:disable */
/* eslint-disable */
/**
 * YT Download Service
 * Allows a google authenticated user to download videos from YouTube.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jijimotte@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GoogleToken,
  HTTPValidationError,
  TokenResponse,
  UserRead,
} from '../models/index';
import {
    GoogleTokenFromJSON,
    GoogleTokenToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    UserReadFromJSON,
    UserReadToJSON,
} from '../models/index';

export interface LoginGoogleTokenApiAuthLoginGoogleTokenPostRequest {
    googleToken: GoogleToken;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Process Google callback, authenticate user, and return a JWT access token.
     * @summary Auth Google
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authGoogleApiAuthGoogleCallbackGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * Process Google callback, authenticate user, and return a JWT access token.
     * Auth Google
     */
    authGoogleApiAuthGoogleCallbackGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse>;

    /**
     * Redirect to Google for authentication.
     * @summary Login Google
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginGoogleApiAuthLoginGoogleGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Redirect to Google for authentication.
     * Login Google
     */
    loginGoogleApiAuthLoginGoogleGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Authenticate user using a Google access token obtained from the extension.
     * @summary Login Google Token
     * @param {GoogleToken} googleToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginGoogleTokenApiAuthLoginGoogleTokenPostRaw(requestParameters: LoginGoogleTokenApiAuthLoginGoogleTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * Authenticate user using a Google access token obtained from the extension.
     * Login Google Token
     */
    loginGoogleTokenApiAuthLoginGoogleTokenPost(googleToken: GoogleToken, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse>;

    /**
     * Return the current authenticated user\'s details.
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    meApiAuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>>;

    /**
     * Return the current authenticated user\'s details.
     * Me
     */
    meApiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Process Google callback, authenticate user, and return a JWT access token.
     * Auth Google
     */
    async authGoogleApiAuthGoogleCallbackGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/google/callback`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Process Google callback, authenticate user, and return a JWT access token.
     * Auth Google
     */
    async authGoogleApiAuthGoogleCallbackGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.authGoogleApiAuthGoogleCallbackGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Redirect to Google for authentication.
     * Login Google
     */
    async loginGoogleApiAuthLoginGoogleGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/login/google`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Redirect to Google for authentication.
     * Login Google
     */
    async loginGoogleApiAuthLoginGoogleGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginGoogleApiAuthLoginGoogleGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user using a Google access token obtained from the extension.
     * Login Google Token
     */
    async loginGoogleTokenApiAuthLoginGoogleTokenPostRaw(requestParameters: LoginGoogleTokenApiAuthLoginGoogleTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['googleToken'] == null) {
            throw new runtime.RequiredError(
                'googleToken',
                'Required parameter "googleToken" was null or undefined when calling loginGoogleTokenApiAuthLoginGoogleTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/login/google/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleTokenToJSON(requestParameters['googleToken']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user using a Google access token obtained from the extension.
     * Login Google Token
     */
    async loginGoogleTokenApiAuthLoginGoogleTokenPost(googleToken: GoogleToken, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.loginGoogleTokenApiAuthLoginGoogleTokenPostRaw({ googleToken: googleToken }, initOverrides);
        return await response.value();
    }

    /**
     * Return the current authenticated user\'s details.
     * Me
     */
    async meApiAuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/api/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserReadFromJSON(jsonValue));
    }

    /**
     * Return the current authenticated user\'s details.
     * Me
     */
    async meApiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.meApiAuthMeGetRaw(initOverrides);
        return await response.value();
    }

}
